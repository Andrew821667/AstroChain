
import json
from datetime import datetime

# Импортируем наши модули
exec(open('src/astronomical/data_fetcher.py').read())
exec(open('src/core/blockchain.py').read())
exec(open('src/consensus/proof_of_astronomy.py').read())

class АстроЧейнДемо:
    """
    Русскоязычная демонстрация AstroChain
    """
    
    def __init__(self):
        print("🚀 Запуск системы АстроЧейн...")
        
        self.сборщик_данных = AstronomicalDataFetcher()
        self.блокчейн = AstroBlockchain()
        self.консенсус = ProofOfAstronomy(block_interval_minutes=1)
        
        print(f"✅ ID узла: {self.консенсус.node_id}")
        print(f"✅ Начальный блок создан")
    
    def показать_астрономические_данные(self):
        """Показывает текущие астрономические данные"""
        print("\n🌌 === КОСМИЧЕСКИЕ ДАННЫЕ ===")
        
        снимок = self.сборщик_данных.get_astronomical_snapshot()
        
        if "iss" in снимок.get("sources", {}):
            мкс = снимок["sources"]["iss"]
            print(f"🛰️ МКС находится:")
            print(f"   Широта: {мкс['latitude']}°")
            print(f"   Долгота: {мкс['longitude']}°")
        else:
            print("🛰️ МКС: данные недоступны")
        
        if "solar" in снимок.get("sources", {}):
            солнце = снимок["sources"]["solar"]
            print(f"☀️ Солнечная активность:")
            print(f"   Поток частиц: {солнце['flux']}")
            print(f"   Энергия: {солнце['energy']}")
        else:
            print("☀️ Солнце: данные недоступны")
        
        астро_хеш = self.сборщик_данных.generate_astronomical_hash(снимок)
        print(f"🔐 Космический хеш: {астро_хеш[:16]}...")
        
        return снимок
    
    def создать_транзакции(self):
        """Создает тестовые транзакции"""
        print("\n💳 === СОЗДАНИЕ ТРАНЗАКЦИЙ ===")
        
        # Русские адреса для наглядности
        тх1 = Transaction("Алиса_АстроЧейн", "Боб_АстроЧейн", 1000.0, 
                         {"описание": "Первый перевод в АстроЧейн!"})
        тх2 = Transaction("Боб_АстроЧейн", "Владимир_АстроЧейн", 500.0, 
                         {"описание": "Космический перевод"})
        тх3 = Transaction("Владимир_АстроЧейн", "Алиса_АстроЧейн", 250.0,
                         {"описание": "Возврат части суммы"})
        
        self.блокчейн.add_transaction(тх1)
        self.блокчейн.add_transaction(тх2)
        self.блокчейн.add_transaction(тх3)
        
        print(f"✅ Создано транзакций: 3")
        print(f"💰 Алиса → Боб: 1000 АСТРО")
        print(f"💰 Боб → Владимир: 500 АСТРО") 
        print(f"💰 Владимир → Алиса: 250 АСТРО")
        print(f"📋 В очереди: {len(self.блокчейн.pending_transactions)} транзакций")
        
        return [тх1, тх2, тх3]
    
    def создать_блок_по_космосу(self, астро_данные):
        """Создает блок на основе космических данных"""
        print("\n⛓️ === СОЗДАНИЕ БЛОКА ПО КОСМИЧЕСКИМ ДАННЫМ ===")
        
        # Вычисляем астрономический консенсус
        хеш_консенсуса = self.консенсус.calculate_astronomical_consensus(астро_данные)
        астро_данные["astronomical_hash"] = хеш_консенсуса
        
        print(f"🧮 Консенсус-хеш: {хеш_консенсуса[:16]}...")
        
        # Проверяем право создать блок
        может_создать = self.консенсус.can_create_block(хеш_консенсуса, self.консенсус.node_id)
        print(f"🎯 Право создать блок: {'ДА' if может_создать else 'НЕТ'}")
        
        if not может_создать:
            print("🔨 Ищем подходящий nonce (доказательство работы)...")
            nonce = self.консенсус.find_valid_nonce(хеш_консенсуса, max_attempts=100000)
            if nonce:
                print(f"✅ Найден nonce: {nonce}")
                может_создать = True
            else:
                print("❌ Nonce не найден")
                return None
        
        if может_создать:
            блок = self.блокчейн.create_block(астро_данные)
            print(f"✅ Блок #{блок.index} успешно создан!")
            print(f"📦 Хеш блока: {блок.hash[:16]}...")
            print(f"🌌 Астрономический хеш: {блок.astronomical_hash[:16]}...")
            print(f"💳 Транзакций в блоке: {len(блок.transactions)}")
            return блок
        
        return None
    
    def показать_балансы(self):
        """Показывает балансы всех участников"""
        print("\n💰 === БАЛАНСЫ УЧАСТНИКОВ ===")
        
        участники = ["Алиса_АстроЧейн", "Боб_АстроЧейн", "Владимир_АстроЧейн"]
        
        for участник in участники:
            баланс = self.блокчейн.get_balance(участник)
            if баланс > 0:
                print(f"💚 {участник}: +{баланс} АСТРО")
            elif баланс < 0:
                print(f"💸 {участник}: {баланс} АСТРО")
            else:
                print(f"⚪ {участник}: {баланс} АСТРО")
    
    def проверить_систему(self):
        """Проверяет работоспособность всей системы"""
        print("\n🔍 === ПРОВЕРКА СИСТЕМЫ ===")
        
        # Проверяем блокчейн
        валидность_цепи = self.блокчейн.is_chain_valid()
        print(f"⛓️ Блокчейн валиден: {'ДА' if валидность_цепи else 'НЕТ'}")
        
        # Информация о блокчейне
        инфо = self.блокчейн.get_chain_info()
        print(f"📊 Длина цепи: {инфо['length']} блоков")
        print(f"⏳ Транзакций в ожидании: {инфо['pending_transactions']}")
        
        # Последний блок
        последний_блок = self.блокчейн.get_latest_block()
        print(f"🏁 Последний блок: #{последний_блок.index}")
        
        источники = последний_блок.astronomical_data.get('sources', {})
        if источники:
            print(f"🌌 Космические источники: {list(источники.keys())}")
        
        return валидность_цепи
    
    def полная_демонстрация(self):
        """Запускает полную демонстрацию на русском языке"""
        print("=" * 70)
        print("🇷🇺 ДЕМОНСТРАЦИЯ СИСТЕМЫ АСТРОЧЕЙН 🇷🇺")
        print("=" * 70)
        print("Блокчейн на основе астрономических данных")
        print("Разработано как эксперимент независимой валюты")
        print("=" * 70)
        
        try:
            # 1. Показываем космические данные
            астро_данные = self.показать_астрономические_данные()
            
            # 2. Создаем транзакции
            транзакции = self.создать_транзакции()
            
            # 3. Создаем блок на основе космоса
            блок = self.создать_блок_по_космосу(астро_данные)
            
            if блок:
                # 4. Показываем балансы
                self.показать_балансы()
                
                # 5. Проверяем систему
                система_работает = self.проверить_систему()
                
                if система_работает:
                    print("\n🎉 === УСПЕХ! ВСЯ СИСТЕМА РАБОТАЕТ! ===")
                    print("✨ АстроЧейн готов к реальному тестированию!")
                    print("🚀 Это первый в мире блокчейн на космических данных!")
                else:
                    print("\n❌ === ОШИБКА В СИСТЕМЕ ===")
            else:
                print("\n⏸️ === НЕ УДАЛОСЬ СОЗДАТЬ БЛОК ===")
            
            print("\n🔬 === ТЕХНИЧЕСКАЯ ИНФОРМАЦИЯ ===")
            print(f"💻 Алгоритм консенсуса: Proof of Astronomy (PoA)")
            print(f"🌍 Источники данных: NASA, NOAA")
            print(f"⏱️ Интервал блоков: {self.консенсус.block_interval.total_seconds()/60} минут")
            print(f"🔐 Уровень сложности: {self.консенсус.difficulty_target}")
            print(f"🆔 ID этого узла: {self.консенсус.node_id}")
            
            return True
            
        except Exception as ошибка:
            print(f"\n💥 ОШИБКА: {ошибка}")
            return False

# Запускаем русскую демонстрацию
if __name__ == "__main__":
    демо = АстроЧейнДемо()
    успех = демо.полная_демонстрация()
    
    if успех:
        print("\n🏆 ПОЗДРАВЛЯЕМ! MVP АстроЧейн работает!")
        print("🌟 Готово к загрузке в GitHub и дальнейшей разработке!")
    else:
        print("\n🔧 Требуется отладка")
