
import json
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ (–≤ Colab –Ω–∞–ø—Ä—è–º—É—é)
exec(open('src/astronomical/data_fetcher.py').read())
exec(open('src/core/blockchain.py').read())
exec(open('src/consensus/proof_of_astronomy.py').read())

class AstroChainDemo:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã AstroChain —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        print("üöÄ Initializing AstroChain Demo...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.data_fetcher = AstronomicalDataFetcher()
        self.blockchain = AstroBlockchain()
        self.consensus = ProofOfAstronomy(block_interval_minutes=1)  # –î–ª—è –¥–µ–º–æ: 1 –º–∏–Ω—É—Ç–∞
        
        print(f"‚úÖ Node ID: {self.consensus.node_id}")
        print(f"‚úÖ Genesis block created: {self.blockchain.get_latest_block().hash[:16]}...")
    
    def demonstrate_transaction_flow(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        print("\nüîÑ === TRANSACTION FLOW DEMO ===")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx1 = Transaction("astro_alice", "astro_bob", 100.0, {"memo": "First AstroChain payment!"})
        tx2 = Transaction("astro_bob", "astro_charlie", 50.0, {"memo": "Cosmic transfer"})
        tx3 = Transaction("astro_charlie", "astro_alice", 25.0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ blockchain
        self.blockchain.add_transaction(tx1)
        self.blockchain.add_transaction(tx2)
        self.blockchain.add_transaction(tx3)
        
        print(f"‚úÖ Added 3 transactions to pool")
        print(f"üìä Pending transactions: {len(self.blockchain.pending_transactions)}")
        
        return [tx1, tx2, tx3]
    
    def demonstrate_astronomical_consensus(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        print("\nüåå === ASTRONOMICAL CONSENSUS DEMO ===")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("üì° Fetching real astronomical data...")
        astronomical_snapshot = self.data_fetcher.get_astronomical_snapshot()
        
        if not astronomical_snapshot["sources"]:
            print("‚ùå No astronomical data available, using mock data")
            astronomical_snapshot = {
                "timestamp": datetime.utcnow().isoformat(),
                "sources": {
                    "iss": {"latitude": 45.123, "longitude": -123.456},
                    "solar": {"flux": 0.2345}
                }
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
        consensus_hash = self.consensus.calculate_astronomical_consensus(astronomical_snapshot)
        astronomical_snapshot["astronomical_hash"] = consensus_hash
        
        print(f"üîç Consensus hash: {consensus_hash[:16]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫
        can_create = self.consensus.can_create_block(consensus_hash, self.consensus.node_id)
        print(f"üéØ Can create block: {can_create}")
        
        if not can_create:
            print("üî® Searching for valid nonce...")
            nonce = self.consensus.find_valid_nonce(consensus_hash, max_attempts=100000)
            if nonce:
                print(f"‚úÖ Found valid nonce: {nonce}")
                can_create = True
            else:
                print("‚ùå No valid nonce found")
        
        return astronomical_snapshot, can_create
    
    def demonstrate_block_creation(self, astronomical_data):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞"""
        print("\n‚õìÔ∏è === BLOCK CREATION DEMO ===")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
        new_block = self.blockchain.create_block(astronomical_data)
        
        print(f"‚úÖ Block #{new_block.index} created!")
        print(f"üì¶ Block hash: {new_block.hash[:16]}...")
        print(f"üåü Astronomical hash: {new_block.astronomical_hash[:16]}...")
        print(f"üå≥ Merkle root: {new_block.merkle_root[:16]}...")
        print(f"üí≥ Transactions: {len(new_block.transactions)}")
        
        return new_block
    
    def demonstrate_validation(self, block):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –±–ª–æ–∫–∞"""
        print("\n‚úÖ === VALIDATION DEMO ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫
        is_valid_astronomical = self.consensus.validate_astronomical_block(block.to_dict())
        is_valid_chain = self.blockchain.is_chain_valid()
        
        print(f"üîç Astronomical validation: {is_valid_astronomical}")
        print(f"‚õìÔ∏è Chain validation: {is_valid_chain}")
        
        return is_valid_astronomical and is_valid_chain
    
    def show_final_state(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä === FINAL STATE ===")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫—á–µ–π–Ω–µ
        chain_info = self.blockchain.get_chain_info()
        print(f"üîó Blockchain length: {chain_info['length']}")
        print(f"üí∏ Pending transactions: {chain_info['pending_transactions']}")
        
        # –ë–∞–ª–∞–Ω—Å—ã
        addresses = ["astro_alice", "astro_bob", "astro_charlie"]
        print("\nüí∞ Balances:")
        for addr in addresses:
            balance = self.blockchain.get_balance(addr)
            print(f"   {addr}: {balance} ASTRO")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        latest = self.blockchain.get_latest_block()
        print(f"\nüì¶ Latest block:")
        print(f"   Index: {latest.index}")
        print(f"   Hash: {latest.hash[:32]}...")
        print(f"   Astronomical data sources: {list(latest.astronomical_data.get('sources', {}).keys())}")
        
        return chain_info
    
    def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
        print("=" * 60)
        print("üåå ASTROCHAIN FULL SYSTEM DEMO üåå")
        print("=" * 60)
        
        try:
            # 1. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = self.demonstrate_transaction_flow()
            
            # 2. –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            astronomical_data, can_create = self.demonstrate_astronomical_consensus()
            
            if can_create:
                # 3. –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞
                new_block = self.demonstrate_block_creation(astronomical_data)
                
                # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è
                is_valid = self.demonstrate_validation(new_block)
                
                if is_valid:
                    print("\nüéâ === SUCCESS! ALL SYSTEMS WORKING! ===")
                else:
                    print("\n‚ùå === VALIDATION FAILED ===")
            else:
                print("\n‚è∏Ô∏è === DEMO PAUSED: No consensus for block creation ===")
            
            # 5. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_state = self.show_final_state()
            
            print("\nüöÄ === ASTROCHAIN DEMO COMPLETED ===")
            return True
            
        except Exception as e:
            print(f"\nüí• ERROR: {e}")
            import traceback
            traceback.print_exc()
            return False

# –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ
if __name__ == "__main__":
    demo = AstroChainDemo()
    success = demo.run_full_demo()
    
    if success:
        print("\n‚ú® AstroChain MVP is working! Ready for production testing! ‚ú®")
    else:
        print("\nüîß Some issues found. Need debugging.")
